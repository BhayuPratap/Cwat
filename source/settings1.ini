# ------------------------------------------------

######## ##          ##  ####  ######  ##    ##
##       ##          ## ##  ##   ##   ####  ####
##        ##        ##  ##  ##   ##   ## #### ##
##        ##   ##   ## ########  ##  ##   ##   ##
##         ## #### ##  ##    ##  ##  ##        ##
##         ####  #### ##      ## ## ##          ##
##########  ##    ##  ##      ## ## ##          ##

# Community Water Model Version 0.99
# SETTINGS FILE
# ------------------------------------------------


#-------------------------------------------------------
# OPTION - to switch on/off
#-------------------------------------------------------

[OPTIONS]
TemperatureInKelvin = True
gridSizeUserDefined = False

writeNetcdfStack = True

includeWaterDemandDomInd = True
includeIrrigation = True

# have to check what this is doing
limitAbstraction = False



inflow = False




#-------------------------------------------------------
[NETCDF_ATTRIBUTES]
institution = IIASA
title = Demo Global Water Model


#-------------------------------------------------------
# BASIC DEFINITIONS
#-------------------------------------------------------
[BASICS]
PathRoot = C:\work


#-------------------------------------------------------
# AREA AND OUTLETS
#-------------------------------------------------------
[MASK_OUTLET]
MaskMap = $(BASICS:PathRoot)\data\areamaps\area_indus.map      ; Cut out Indus only
# MaskMap = 30 20 0.5 65 38
Gauges = $(BASICS:PathRoot)\data\areamaps\station_indus5.map

#-------------------------------------------------------
[TIME-RELATED_CONSTANTS]
#-------------------------------------------------------
CalendarDayStart = 01/01/1990
StepStart = 1
StepEnd =   2

#-------------------------------------------------------
[FILE_PATHS]
#-------------------------------------------------------

PathOut = $(BASICS:PathRoot)\output
PathMaps = $(BASICS:PathRoot)\data\mapsNetcdf\maps
PathMaps2 = M:\pcrglob_inputNetcdf
PathMeteo = M:\climate\Isi-Mip1\hadgem2-es\historical









#-------------------------------------------------------
# TOPOGRAPHY MAPS
#-------------------------------------------------------
[TOPOP]
# local drain direction map (1-9)
Ldd = $(FILE_PATHS:PathMaps)\ldd.map
# Elevation standard deviation [m], i.e. altitude difference elevation within pixel.
# Used for sub-pixel modelling of snow accumulation and melt
ElevationStD =$(FILE_PATHS:PathMaps)\elvstd.map


#-------------------------------------------------------
# INPUT METEOROLOGICAL TIMESERIES AS MAPS
#-------------------------------------------------------
[METEO]
# precipitation [mm/day]
PrecipitationMaps = $(FILE_PATHS:PathMeteo)\pr
# average daily temperature [C]
TavgMaps = $(FILE_PATHS:PathMeteo)\tavg
# daily reference evaporation (free water) [mm/day]
E0Maps = $(FILE_PATHS:PathMeteo)\e
# daily reference evapotranspiration (crop) [mm/day]
ETMaps = $(FILE_PATHS:PathMeteo)\et



#-------------------------------------------------------
[SNOW]
#-------------------------------------------------------

# Temperature lapse rate with altitude [deg C / m]
TemperatureLapseRate = 0.0065 
# Multiplier applied to precipitation that falls as snow
SnowFactor = 1.0
# Range [mm C-1 d-1] of the seasonal variation, SnowMeltCoef is the average value
SnowSeasonAdj = 1.0
# Average temperature at which snow melts
TempMelt =1.0
# Average temperature below which precipitation is snow
TempSnow = 1.0
# Snow melt coefficient: default: 4.0 
# SRM: 0.45 cm/C/day ( = 4.50 mm/C/day), Kwadijk: 18 mm/C/month (= 0.59 mm/C/day)  
# See also Martinec et al., 1998.
SnowMeltCoef = 4.0

#--------------------------------------------------------------
# INITIAL CONDITIONS - Initial snow depth in snow zone A,B,C [mm]
SnowCoverAInitValue = 0
SnowCoverBInitValue = 0
SnowCoverCInitValue = 0

[FROST]
# Snow water equivalent, (based on snow density of 450 kg/m3) (e.g. Tarboton and Luce, 1996)
SnowWaterEquivalent = 0.45
# Daily decay coefficient, (Handbook of Hydrology, p. 7.28)
Afrost = 0.97
# Snow depth reduction coefficient, [cm-1], (HH, p. 7.28)
Kfrost = 0.57
# Degree Days Frost Threshold (stops infiltration, percolation and capillary rise)
# Molnau and Bissel found a value 56-85 for NW USA.
FrostIndexThreshold = 56

#--------------------------------------------------------------
# INITIAL CONDITIONS
FrostIndexInitValue = 0

#-------------------------------------------------------
[SOIL]
#-------------------------------------------------------

PathTopo = $(FILE_PATHS:PathMaps2)\landsurface\topo
PathSoil = $(FILE_PATHS:PathMaps2)\landsurface\soil

# Topography mapsNetcdf\maps
# tangent slope, slope length and orographybeta (have to aSK WHAT IT IS)
tanslope = $(PathTopo)\tanslope.map
slopeLength = $(PathTopo)\slopeLength.map
orographyBeta = $(PathTopo)\orographyBeta.map
# maps of relative elevation above flood plains  are missing HERE!

# Soil properties
airEntryValue1 = $(PathSoil)\airEntryValue1.map
airEntryValue2 = $(PathSoil)\airEntryValue2.map
poreSizeBeta1 = $(PathSoil)\poreSizeBeta1.map
poreSizeBeta2 = $(PathSoil)\poreSizeBeta2.map
resVolWC1 = $(PathSoil)\resVolWC1.map
resVolWC2 = $(PathSoil)\resVolWC2.map
satVolWC1 = $(PathSoil)\satVolWC1.map
satVolWC2 = $(PathSoil)\satVolWC2.map
KSat1 = $(PathSoil)\KSat2.map
KSat2 = $(PathSoil)\KSat2.map
percolationImp = $(PathSoil)\percolationImp.map

clappAddCoeff   = 3.0
matricSuctionFC = 1.0
matricSuction50 = 3.33
matricSuctionWP = 156.0
maxGWCapRise    = 5.0

# Soil depth
firstStorDepth = $(PathSoil)\firstStorDepth.map
secondStorDepth = $(PathSoil)\secondStorDepth.map
soilWaterStorageCap1 = $(PathSoil)\soilWaterStorageCap1.map
soilWaterStorageCap2 = $(PathSoil)\soilWaterStorageCap2.map

[LandCoverType]

coverTypes = forest, grassland, irrPaddy, irrNonPaddy
coverTypesShort = f, g, i, n

[forest]
PathForest = $(FILE_PATHS:PathMaps2)\landcover\forest

# Parameters for the Arno's scheme:
arnoBeta = None
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.

# other paramater values
minTopWaterLayer = 0.0
minCropKC        = 0.2
minInterceptCap  = 0.001


fracVegCover  = $(PathForest)\fracVegCover.map
rootFraction1 = $(PathForest)\rootFraction1.map
rootFraction2 = $(PathForest)\rootFraction1.map
maxRootDepth  = $(PathForest)\maxRootDepth.map
minSoilDepthFrac = $(PathForest)\minSoilDepthFrac.map
maxSoilDepthFrac = $(PathForest)\maxSoilDepthFrac.map

cropCoefficientNC = $(PathForest)\Global_CropCoefficientKc-Forest_30min.nc
interceptCapNC    = $(PathForest)\interceptCapInputForest366days.nc
coverFractionNC   = $(PathForest)\coverFractionInputForest366days.nc

# initial conditions:
interceptStorIni = 0.0
topWaterLayerIni = 0.0
storUpp000005Ini = 0.0
storUpp005030Ini = 0.0
storLow030150Ini = 0.0
interflowIni     = 0.0


#-------------------------------------------------------
[GROUNDWATER]
#-------------------------------------------------------

PathGroundwater = $(FILE_PATHS:PathMaps2)\groundwater

recessionCoeff = $(PathGroundwater)\recessionCoeff.map
specificYield = $(PathGroundwater)\specificYield.map
kSatAquifer = $(PathGroundwater)\kSatAquifer.map

#--------------------------------------------------------------
# INITIAL CONDITIONS
storGroundwater = 0.0

#-------------------------------------------------------
[WATERDEMAND]
#-------------------------------------------------------

PathWaterdemand = $(FILE_PATHS:PathMaps2)\landsurface\waterDemand

domesticWaterDemandFile = $(PathWaterdemand)\domesticWaterDemand30ArcMin.nc
industryWaterDemandFile = $(PathWaterdemand)\industryWaterDemand30ArcMin.nc
historicalIrrigationArea = $(PathWaterdemand)\irrigationArea30ArcMin.map


#-------------------------------------------------------
[INFLOW]
#-------------------------------------------------------

# if option inflow = true
# the inflow from outside is added at inflowpoints


# OPTIONAL: nominal map with locations of (measured)inflow hydrographs [cu m / s]
InflowPoints = $(FILE_PATHS:PathMaps)\inflowpoints.map
# OPTIONAL: observed or simulated input hydrographs as time series [cu m / s]
#Note that identifiers in time series correspond to InflowPoints
QInTS = nile_assiut.tss